package partitionedsort;

import java.lang.Math;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.util.regex.*;

// one class needs to have a main() method
public class PartitionedSort {

   // private static final Pattern ALPH_NUM_PAT = Pattern.compile("[0-9]+|[A-Z]+");

    // private static     ArrayList<String> countryList = new ArrayList<>();         
    static char[] sort(String s) {
        char[] c = new char[s.length() + 1];

        // String to character array 
        c = s.toCharArray();

        // Sort the array 
        Arrays.sort(c);

        return c;
    }

    public static void main(String[] args) {
        List<String> one = new ArrayList<>();
        BufferedReader br = null;
        /**
         * countryList.add("43512abc87241dDfe");
         * countryList.add("43512abc87241Ddef");
         * countryList.add("43512abc87241fdeFsSf");
         * countryList.add("aDAbc43512abc87241fdeFsSf");
         *
         */

        //  System.out.printf("Execution time: %dns%n", testMatch());
        try {
            br = new BufferedReader(new FileReader("fileName.txt"));
            File file = new File("fileName1.txt");

            if (!file.exists()) {
                file.createNewFile();
            }
            PrintWriter pw = new PrintWriter(file);
            pw.println("this is my file content");
            String line;
            char[] result = null;
            while ((line = br.readLine()) != null) {

                one = parse2(line);
                System.out.println(parse2(line));
                for (int i = 0; i < one.size(); i++) {
                    result = sort(one.get(i));
                    System.out.print(result);
                    pw.print(result);
                }
                System.out.println("");
                pw.println("");

            }

            pw.close();
            System.out.println("Done");
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    private static List<String> parse2(String str) {
        return Arrays.asList(str.split("(?i)((?<=[A-Z])(?=\\d))|((?<=\\d)(?=[A-Z]))"));
    }
}
